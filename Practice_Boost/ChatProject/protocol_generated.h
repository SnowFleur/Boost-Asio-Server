// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_CHATSERVERPROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_CHATSERVERPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace ChatServerProtocol {

struct sc_loginOk_packet;
struct sc_loginOk_packetBuilder;

enum PacketType : int8_t {
  PacketType_sc_login_ok_ = 1,
  PacketType_cs_send_message = 2,
  PacketType_MIN = PacketType_sc_login_ok_,
  PacketType_MAX = PacketType_cs_send_message
};

inline const PacketType (&EnumValuesPacketType())[2] {
  static const PacketType values[] = {
    PacketType_sc_login_ok_,
    PacketType_cs_send_message
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[3] = {
    "sc_login_ok_",
    "cs_send_message",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (flatbuffers::IsOutRange(e, PacketType_sc_login_ok_, PacketType_cs_send_message)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(PacketType_sc_login_ok_);
  return EnumNamesPacketType()[index];
}

struct sc_loginOk_packet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef sc_loginOk_packetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_SESSION_ID = 6,
    VT_TYPE = 8
  };
  uint8_t size() const {
    return GetField<uint8_t>(VT_SIZE, 0);
  }
  uint32_t session_id() const {
    return GetField<uint32_t>(VT_SESSION_ID, 0);
  }
  ChatServerProtocol::PacketType type() const {
    return static_cast<ChatServerProtocol::PacketType>(GetField<int8_t>(VT_TYPE, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SIZE) &&
           VerifyField<uint32_t>(verifier, VT_SESSION_ID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct sc_loginOk_packetBuilder {
  typedef sc_loginOk_packet Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_size(uint8_t size) {
    fbb_.AddElement<uint8_t>(sc_loginOk_packet::VT_SIZE, size, 0);
  }
  void add_session_id(uint32_t session_id) {
    fbb_.AddElement<uint32_t>(sc_loginOk_packet::VT_SESSION_ID, session_id, 0);
  }
  void add_type(ChatServerProtocol::PacketType type) {
    fbb_.AddElement<int8_t>(sc_loginOk_packet::VT_TYPE, static_cast<int8_t>(type), 1);
  }
  explicit sc_loginOk_packetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<sc_loginOk_packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<sc_loginOk_packet>(end);
    return o;
  }
};

inline flatbuffers::Offset<sc_loginOk_packet> Createsc_loginOk_packet(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t size = 0,
    uint32_t session_id = 0,
    ChatServerProtocol::PacketType type = ChatServerProtocol::PacketType_sc_login_ok_) {
  sc_loginOk_packetBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_type(type);
  builder_.add_size(size);
  return builder_.Finish();
}

inline const ChatServerProtocol::sc_loginOk_packet *Getsc_loginOk_packet(const void *buf) {
  return flatbuffers::GetRoot<ChatServerProtocol::sc_loginOk_packet>(buf);
}

inline const ChatServerProtocol::sc_loginOk_packet *GetSizePrefixedsc_loginOk_packet(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ChatServerProtocol::sc_loginOk_packet>(buf);
}

inline bool Verifysc_loginOk_packetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ChatServerProtocol::sc_loginOk_packet>(nullptr);
}

inline bool VerifySizePrefixedsc_loginOk_packetBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ChatServerProtocol::sc_loginOk_packet>(nullptr);
}

inline void Finishsc_loginOk_packetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ChatServerProtocol::sc_loginOk_packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedsc_loginOk_packetBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ChatServerProtocol::sc_loginOk_packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ChatServerProtocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_CHATSERVERPROTOCOL_H_
